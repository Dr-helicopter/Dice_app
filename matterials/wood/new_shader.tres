[gd_resource type="Shader" format=2]

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx, async_visible;


uniform sampler2D albedo : hint_albedo;
uniform sampler2D ORM;
uniform sampler2D Normal_map;
uniform sampler2D texture_depth : hint_black;
uniform float depth_scale;
uniform int depth_min_layers;
uniform int depth_max_layers;
uniform vec2 depth_flip;



uniform vec2 uv1_scale;
uniform vec2 uv1_offset;




void vertex() {
	UV = UV * uv1_scale + uv1_offset;
}

void fragment() {
	vec2 base_uv = UV;
	{
		vec3 view_dir = normalize(normalize(-VERTEX)*mat3(TANGENT*depth_flip.x,-BINORMAL*depth_flip.y,NORMAL));
		float num_layers = mix(float(depth_max_layers),float(depth_min_layers), abs(dot(vec3(0.0, 0.0, 1.0), view_dir)));
		float layer_depth = 1.0 / num_layers;
		float current_layer_depth = 0.0;
		vec2 P = view_dir.xy * depth_scale;
		vec2 delta = P / num_layers;
		vec2 ofs = base_uv;
		float depth = textureLod(texture_depth, ofs, 0.0).r;
		float current_depth = 0.0;
		while(current_depth < depth) {
			ofs -= delta;
			depth = textureLod(texture_depth, ofs, 0.0).r;
			current_depth += layer_depth;
		}
		vec2 prev_ofs = ofs + delta;
		float after_depth  = depth - current_depth;
		float before_depth = textureLod(texture_depth, prev_ofs, 0.0).r - current_depth + layer_depth;
		float weight = after_depth / (after_depth - before_depth);
		ofs = mix(ofs,prev_ofs,weight);
		base_uv=ofs;
	}






// Input:10
	vec3 n_out10p0 = vec3(UV, 0.0);

// VectorDecompose:11
	float n_out11p0 = n_out10p0.x;
	float n_out11p1 = n_out10p0.y;
	float n_out11p2 = n_out10p0.z;



// TextureUniform: ALBEDO
	vec3 ALBEDO_outp0;
	float ALBEDO_outp1;
	{
		vec4 n_tex_read = texture(albedo, base_uv);
		ALBEDO_outp0 = n_tex_read.rgb;
		ALBEDO_outp1 = n_tex_read.a;
	}

// TextureUniform:17
	vec3 ORM_outp0;
	float ORM_outp1;
	{
		vec4 n_tex_read = texture(ORM, base_uv);
		ORM_outp0 = n_tex_read.rgb;
		ORM_outp1 = n_tex_read.a;
	}

// VectorDecompose:5
	float AO_outp0 = ORM_outp0.x;
	float ROUGHNESS_outp0 = ORM_outp0.y;
	float METALLIC_outp0 = ORM_outp0.z;

// TextureUniform:18
	vec3 NORMALMAP0;
	float NORMALMAP1;
	{
		vec4 n_tex_read = texture(Normal_map, base_uv);
		NORMALMAP0 = n_tex_read.rgb;
		NORMALMAP1 = n_tex_read.a;
	}

// Output:0
	ALBEDO = ALBEDO_outp0;
	METALLIC = METALLIC_outp0;
	ROUGHNESS = ROUGHNESS_outp0;
	AO = AO_outp0;
	NORMALMAP = NORMALMAP0;

}

void light() {
// Output:0

}
"
